// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id        String   @id @default(cuid())
  title     String
  link      String
  tags      String[]
  readUsers User[]   @relation("read_articles")
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model User {
  id           String    @id @default(cuid())
  name         String?
  email        String?   @unique
  image        String?
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @updatedAt @map(name: "updated_at")
  readArticles Article[] @relation("read_articles")
  articles     Article[]
  accounts     Account[]
  sessions     Session[]

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// model ArticlesOnUsers {
//   readArticle   Article @relation(fields: [readArticleId], references: [id])
//   readArticleId String // relation scalar field (used in the `@relation` attribute above)
//   readUser      User    @relation(fields: [readUserId], references: [id])
//   readUserId    String // relation scalar field (used in the `@relation` attribute above)
//   // assignedAt    DateTime @default(now())
//   // assignedBy    String

//   @@id([readArticleId, readUserId])
// }
